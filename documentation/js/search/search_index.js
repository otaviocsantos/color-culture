var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.1.6","fields":["title","body"],"fieldVectors":[["title/classes/Color.html",[0,0.311,1,0.465]],["body/classes/Color.html",[0,0.443,1,0.844,2,0.853,3,0.853,4,0.491,5,0.853,6,0.853,7,1.825,8,0.646,9,1.855,10,2.246,11,2.539,12,1.641,13,1.641,14,1.902,15,1.01,16,3.051,17,1.747,18,0.109,19,1.333,20,1.837,21,1.333,22,2.307,23,1.167,24,3.245,25,2.92,26,1.825,27,2.425,28,1.167,29,1.825,30,1.825,31,1.405,32,1.333,33,1.825,34,1.167,35,0.646,36,2.627,37,1.284,38,1.167,39,1.641,40,1.167,41,1.229,42,1.825,43,2.013,44,1.069,45,1.855,46,3.051,47,2.539,48,1.825,49,1.167,50,1.333,51,1.167,52,1.167,53,1.167,54,1.167,55,1.167,56,1.641,57,1.333,58,1.333,59,1.167,60,1.167,61,1.01,62,1.825,63,1.333,64,1.825,65,1.167,66,1.167,67,1.167,68,1.01,69,0.368,70,0.491,71,0.853,72,1.825,73,1.167,74,1.167,75,1.167,76,1.01,77,1.825,78,1.167,79,1.167,80,1.167,81,0.049,82,0.049]],["title/classes/ColorCulture.html",[0,0.311,69,0.646]],["body/classes/ColorCulture.html",[0,0.352,1,0.778,2,0.897,3,0.897,4,0.517,6,1.387,8,0.68,9,1.387,12,1.695,13,1.695,15,1.283,17,1.05,18,0.109,19,0.897,20,0.68,21,0.897,22,1.695,27,2.271,31,0.68,35,1.72,36,0.897,37,1.098,39,1.387,41,1.308,43,0.897,44,0.517,45,0.897,56,0.897,57,1.387,58,1.387,68,1.65,69,0.598,70,1.098,71,0.897,81,0.051,82,0.051,83,1.906,84,0.897,85,1.387,86,1.387,87,1.387,88,1.898,89,2.982,90,1.906,91,2.319,92,1.898,93,1.387,94,1.387,95,2.061,96,1.898,97,1.05,98,1.228,99,2.319,100,1.228,101,1.228,102,1.228,103,0.68,104,0.68,105,0.897,106,1.898,107,1.898,108,1.444,109,1.228,110,1.228,111,1.228,112,0.897,113,1.228,114,0.897,115,1.228,116,1.228,117,1.228,118,1.228,119,2.179,120,2.609,121,1.228,122,1.695,123,2.982,124,1.228,125,2.982,126,1.228,127,2.319,128,1.228,129,2.982,130,1.228,131,2.609,132,3.108,133,1.387,134,1.228,135,1.228,136,1.228,137,1.228,138,1.228,139,1.228,140,1.228,141,1.898,142,0.897,143,1.228]],["title/coverage.html",[144,2.009]],["body/coverage.html",[0,0.57,1,0.569,4,1.054,5,1.83,17,1.386,18,0.104,32,1.83,37,1.054,41,1.054,69,0.789,76,1.386,81,0.085,82,0.085,83,1.83,84,1.83,108,1.386,112,1.83,144,1.83,145,1.83,146,2.505,147,3.683,148,2.505,149,2.505,150,2.505,151,2.505,152,2.505,153,2.505,154,2.505,155,2.505,156,3.131,157,2.505,158,2.505,159,2.505]],["title/dependencies.html",[160,1.268,161,1.792]],["body/dependencies.html",[18,0.103,81,0.094,82,0.094,161,2.192,162,2.999,163,2.999,164,2.999,165,2.192]],["title/index.html",[8,0.961,166,0.961,167,0.961]],["body/index.html",[0,0.281,1,0.877,14,2.027,18,0.108,20,1.257,35,1.537,37,1.43,41,1.505,44,0.5,50,1.352,61,1.257,63,0.868,68,1.996,69,0.808,70,1.373,76,1.846,81,0.05,82,0.05,85,0.868,86,1.352,87,1.352,90,1.66,93,1.352,94,0.868,95,2.384,103,0.658,104,0.658,105,1.873,108,1.91,119,1.66,122,1.352,133,1.352,160,0.868,168,1.189,169,2.272,170,2.272,171,1.189,172,1.189,173,1.189,174,2.272,175,2.272,176,1.189,177,1.85,178,2.564,179,1.85,180,1.189,181,1.189,182,0.868,183,1.189,184,1.189,185,2.272,186,1.189,187,0.868,188,1.189,189,1.189,190,2.272,191,1.189,192,1.189,193,1.189,194,1.85,195,1.189,196,1.85,197,1.189,198,1.85,199,1.189,200,1.189,201,1.189,202,2.564,203,1.85,204,1.189,205,1.189,206,1.189,207,1.189,208,1.189,209,1.189,210,1.189,211,1.189,212,1.189,213,1.189,214,1.189,215,1.85,216,1.85,217,1.189,218,2.272,219,1.85,220,1.189]],["title/license.html",[166,0.961,167,0.961,221,1.268]],["body/license.html",[4,0.883,18,0.075,31,1.545,81,0.075,82,0.075,103,1.16,104,1.736,114,2.293,145,1.532,182,1.532,221,1.532,222,2.097,223,3.138,224,2.097,225,2.097,226,2.097,227,2.792,228,2.097,229,2.097,230,2.097,231,2.097,232,2.792,233,2.097,234,3.345,235,3.76,236,2.097,237,2.792,238,2.097,239,2.792,240,2.097,241,2.097,242,2.097,243,2.097,244,2.097,245,2.097,246,2.097,247,2.097,248,2.097,249,2.097,250,2.097,251,2.097,252,2.097,253,2.097,254,2.792,255,2.792,256,2.097,257,2.097,258,2.792,259,2.097,260,2.097,261,2.097,262,2.097,263,2.097,264,2.097,265,2.097,266,2.097,267,2.097,268,2.097,269,2.097,270,2.097,271,2.097,272,2.097,273,2.097,274,2.097,275,2.097,276,2.097,277,2.097,278,2.097,279,2.097,280,2.097]],["title/modules.html",[97,1.521]],["body/modules.html",[18,0.096,81,0.096,82,0.096,97,1.712]],["title/overview.html",[281,2.009]],["body/overview.html",[0,0.464,18,0.095,81,0.095,82,0.095,142,2.237,281,2.237]],["title/todo.html",[166,0.961,167,0.961,282,1.736]],["body/todo.html",[1,0.833,14,1.487,15,1.487,18,0.107,44,1.131,61,1.95,70,1.131,81,0.088,82,0.088,165,1.963,187,2.575,283,2.687,284,2.687,285,2.687,286,2.687,287,2.687,288,2.687,289,2.687]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"todo.html":{}}}],["0",{"_index":133,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["0.0.14",{"_index":163,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":21,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["1.0.0",{"_index":96,"title":{},"body":{"classes/ColorCulture.html":{}}}],["1.0.1",{"_index":288,"title":{},"body":{"todo.html":{}}}],["1.0.2",{"_index":165,"title":{},"body":{"dependencies.html":{},"todo.html":{}}}],["100",{"_index":147,"title":{},"body":{"coverage.html":{}}}],["11/11",{"_index":156,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":136,"title":{},"body":{"classes/ColorCulture.html":{}}}],["2018",{"_index":225,"title":{},"body":{"license.html":{}}}],["255",{"_index":122,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["360",{"_index":140,"title":{},"body":{"classes/ColorCulture.html":{}}}],["4",{"_index":137,"title":{},"body":{"classes/ColorCulture.html":{}}}],["4/4",{"_index":148,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":151,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":142,"title":{},"body":{"classes/ColorCulture.html":{},"overview.html":{}}}],["60",{"_index":139,"title":{},"body":{"classes/ColorCulture.html":{}}}],["75",{"_index":153,"title":{},"body":{"coverage.html":{}}}],["8/8",{"_index":150,"title":{},"body":{"coverage.html":{}}}],["9/12",{"_index":154,"title":{},"body":{"coverage.html":{}}}],["_alpha",{"_index":11,"title":{},"body":{"classes/Color.html":{}}}],["abov",{"_index":253,"title":{},"body":{"license.html":{}}}],["accessor",{"_index":51,"title":{},"body":{"classes/Color.html":{}}}],["action",{"_index":275,"title":{},"body":{"license.html":{}}}],["addit",{"_index":283,"title":{},"body":{"todo.html":{}}}],["alpha",{"_index":24,"title":{},"body":{"classes/Color.html":{}}}],["alpha(v",{"_index":73,"title":{},"body":{"classes/Color.html":{}}}],["and/or",{"_index":246,"title":{},"body":{"license.html":{}}}],["angular",{"_index":284,"title":{},"body":{"todo.html":{}}}],["anoth",{"_index":50,"title":{},"body":{"classes/Color.html":{},"index.html":{}}}],["aris",{"_index":279,"title":{},"body":{"license.html":{}}}],["as(val",{"_index":33,"title":{},"body":{"classes/Color.html":{}}}],["associ",{"_index":236,"title":{},"body":{"license.html":{}}}],["author",{"_index":268,"title":{},"body":{"license.html":{}}}],["automat",{"_index":169,"title":{},"body":{"index.html":{}}}],["base",{"_index":7,"title":{},"body":{"classes/Color.html":{}}}],["basic",{"_index":94,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["batteri",{"_index":115,"title":{},"body":{"classes/ColorCulture.html":{}}}],["between",{"_index":87,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["blue",{"_index":193,"title":{},"body":{"index.html":{}}}],["blueto",{"_index":180,"title":{},"body":{"index.html":{}}}],["c",{"_index":224,"title":{},"body":{"license.html":{}}}],["call",{"_index":181,"title":{},"body":{"index.html":{}}}],["case",{"_index":197,"title":{},"body":{"index.html":{}}}],["cc",{"_index":190,"title":{},"body":{"index.html":{}}}],["channel",{"_index":25,"title":{},"body":{"classes/Color.html":{}}}],["charg",{"_index":231,"title":{},"body":{"license.html":{}}}],["claim",{"_index":271,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Color.html":{},"classes/ColorCulture.html":{}},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["color",{"_index":1,"title":{"classes/Color.html":{}},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"coverage.html":{},"index.html":{},"todo.html":{}}}],["color.a",{"_index":40,"title":{},"body":{"classes/Color.html":{}}}],["color_instance.as(hsl",{"_index":75,"title":{},"body":{"classes/Color.html":{}}}],["color_instance.as(hsl.model",{"_index":80,"title":{},"body":{"classes/Color.html":{}}}],["colora",{"_index":178,"title":{},"body":{"index.html":{}}}],["colora.hsl",{"_index":211,"title":{},"body":{"index.html":{}}}],["colora.hsl();how",{"_index":195,"title":{},"body":{"index.html":{}}}],["colora.hsl();instal",{"_index":184,"title":{},"body":{"index.html":{}}}],["colorb",{"_index":194,"title":{},"body":{"index.html":{}}}],["colorb:hsl",{"_index":183,"title":{},"body":{"index.html":{}}}],["colorcultur",{"_index":69,"title":{"classes/ColorCulture.html":{}},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"coverage.html":{},"index.html":{}}}],["colorculture();convers",{"_index":191,"title":{},"body":{"index.html":{}}}],["colormodel",{"_index":204,"title":{},"body":{"index.html":{}}}],["commonli",{"_index":116,"title":{},"body":{"classes/ColorCulture.html":{}}}],["condit",{"_index":252,"title":{},"body":{"license.html":{}}}],["connect",{"_index":182,"title":{},"body":{"index.html":{},"license.html":{}}}],["const",{"_index":119,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["constant",{"_index":30,"title":{},"body":{"classes/Color.html":{}}}],["constructor",{"_index":91,"title":{},"body":{"classes/ColorCulture.html":{}}}],["contract",{"_index":276,"title":{},"body":{"license.html":{}}}],["conveni",{"_index":102,"title":{},"body":{"classes/ColorCulture.html":{}}}],["convers",{"_index":35,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"index.html":{}}}],["convert",{"_index":37,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"coverage.html":{},"index.html":{}}}],["convert.it(thi",{"_index":77,"title":{},"body":{"classes/Color.html":{}}}],["convert.register(from",{"_index":143,"title":{},"body":{"classes/ColorCulture.html":{}}}],["convert.register(rgb.model",{"_index":117,"title":{},"body":{"classes/ColorCulture.html":{}}}],["converter.register(\"rgb",{"_index":205,"title":{},"body":{"index.html":{}}}],["converter.register(hip.model",{"_index":208,"title":{},"body":{"index.html":{}}}],["converter.register(rgb.model",{"_index":206,"title":{},"body":{"index.html":{}}}],["copi",{"_index":234,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":223,"title":{},"body":{"license.html":{}}}],["coverag",{"_index":144,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["creat",{"_index":175,"title":{},"body":{"index.html":{}}}],["css",{"_index":112,"title":{},"body":{"classes/ColorCulture.html":{},"coverage.html":{}}}],["cultur",{"_index":70,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"index.html":{},"todo.html":{}}}],["culture';instanti",{"_index":188,"title":{},"body":{"index.html":{}}}],["culture.t",{"_index":84,"title":{},"body":{"classes/ColorCulture.html":{},"coverage.html":{}}}],["culture.ts:142",{"_index":101,"title":{},"body":{"classes/ColorCulture.html":{}}}],["culture.ts:15",{"_index":92,"title":{},"body":{"classes/ColorCulture.html":{}}}],["damag",{"_index":272,"title":{},"body":{"license.html":{}}}],["deal",{"_index":237,"title":{},"body":{"license.html":{}}}],["default",{"_index":19,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["defin",{"_index":22,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["delta",{"_index":131,"title":{},"body":{"classes/ColorCulture.html":{}}}],["depend",{"_index":161,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["desir",{"_index":177,"title":{},"body":{"index.html":{}}}],["distribut",{"_index":244,"title":{},"body":{"license.html":{}}}],["document",{"_index":145,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["easier",{"_index":172,"title":{},"body":{"index.html":{}}}],["eg",{"_index":39,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["event",{"_index":267,"title":{},"body":{"license.html":{}}}],["exampl",{"_index":61,"title":{},"body":{"classes/Color.html":{},"index.html":{},"todo.html":{}}}],["execut",{"_index":215,"title":{},"body":{"index.html":{}}}],["export",{"_index":71,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["express",{"_index":260,"title":{},"body":{"license.html":{}}}],["extend",{"_index":201,"title":{},"body":{"index.html":{}}}],["fb",{"_index":125,"title":{},"body":{"classes/ColorCulture.html":{}}}],["fg",{"_index":123,"title":{},"body":{"classes/ColorCulture.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"coverage.html":{},"license.html":{}}}],["find",{"_index":170,"title":{},"body":{"index.html":{}}}],["fit",{"_index":263,"title":{},"body":{"license.html":{}}}],["folder",{"_index":213,"title":{},"body":{"index.html":{}}}],["follow",{"_index":251,"title":{},"body":{"license.html":{}}}],["found",{"_index":212,"title":{},"body":{"index.html":{}}}],["fr",{"_index":120,"title":{},"body":{"classes/ColorCulture.html":{}}}],["free",{"_index":230,"title":{},"body":{"license.html":{}}}],["func",{"_index":99,"title":{},"body":{"classes/ColorCulture.html":{}}}],["function",{"_index":95,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["furnish",{"_index":249,"title":{},"body":{"license.html":{}}}],["get",{"_index":166,"title":{"index.html":{},"license.html":{},"todo.html":{}},"body":{}}],["getalpha",{"_index":52,"title":{},"body":{"classes/Color.html":{}}}],["getsignatur",{"_index":59,"title":{},"body":{"classes/Color.html":{}}}],["grant",{"_index":229,"title":{},"body":{"license.html":{}}}],["h",{"_index":132,"title":{},"body":{"classes/ColorCulture.html":{}}}],["herebi",{"_index":228,"title":{},"body":{"license.html":{}}}],["hip",{"_index":202,"title":{},"body":{"index.html":{}}}],["hip(...hipothet",{"_index":210,"title":{},"body":{"index.html":{}}}],["hip.model",{"_index":207,"title":{},"body":{"index.html":{}}}],["hipothet",{"_index":203,"title":{},"body":{"index.html":{}}}],["holder",{"_index":269,"title":{},"body":{"license.html":{}}}],["hsl",{"_index":108,"title":{},"body":{"classes/ColorCulture.html":{},"coverage.html":{},"index.html":{}}}],["hsl.model",{"_index":118,"title":{},"body":{"classes/ColorCulture.html":{}}}],["identifi",{"_index":32,"title":{},"body":{"classes/Color.html":{},"coverage.html":{}}}],["ie",{"_index":64,"title":{},"body":{"classes/Color.html":{}}}],["impli",{"_index":261,"title":{},"body":{"license.html":{}}}],["import",{"_index":68,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"index.html":{}}}],["includ",{"_index":114,"title":{},"body":{"classes/ColorCulture.html":{},"license.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["instal",{"_index":216,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":62,"title":{},"body":{"classes/Color.html":{}}}],["instanti",{"_index":93,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["intern",{"_index":26,"title":{},"body":{"classes/Color.html":{}}}],["kind",{"_index":259,"title":{},"body":{"license.html":{}}}],["l",{"_index":135,"title":{},"body":{"classes/ColorCulture.html":{}}}],["liabil",{"_index":273,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":270,"title":{},"body":{"license.html":{}}}],["librari",{"_index":168,"title":{},"body":{"index.html":{}}}],["licens",{"_index":221,"title":{"license.html":{}},"body":{"license.html":{}}}],["limit",{"_index":239,"title":{},"body":{"license.html":{}}}],["long",{"_index":200,"title":{},"body":{"index.html":{}}}],["made",{"_index":107,"title":{},"body":{"classes/ColorCulture.html":{}}}],["main",{"_index":189,"title":{},"body":{"index.html":{}}}],["make",{"_index":171,"title":{},"body":{"index.html":{}}}],["manipul",{"_index":289,"title":{},"body":{"todo.html":{}}}],["match",{"_index":82,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"todo.html":{}}}],["math.max(fr",{"_index":130,"title":{},"body":{"classes/ColorCulture.html":{}}}],["math.min(fr",{"_index":128,"title":{},"body":{"classes/ColorCulture.html":{}}}],["math.min(h",{"_index":138,"title":{},"body":{"classes/ColorCulture.html":{}}}],["max",{"_index":129,"title":{},"body":{"classes/ColorCulture.html":{}}}],["merchant",{"_index":262,"title":{},"body":{"license.html":{}}}],["merg",{"_index":242,"title":{},"body":{"license.html":{}}}],["method",{"_index":15,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"todo.html":{}}}],["mileston",{"_index":287,"title":{},"body":{"todo.html":{}}}],["min",{"_index":127,"title":{},"body":{"classes/ColorCulture.html":{}}}],["mit",{"_index":222,"title":{},"body":{"license.html":{}}}],["model",{"_index":14,"title":{},"body":{"classes/Color.html":{},"index.html":{},"todo.html":{}}}],["models/color",{"_index":109,"title":{},"body":{"classes/ColorCulture.html":{}}}],["models/css",{"_index":113,"title":{},"body":{"classes/ColorCulture.html":{}}}],["models/hsl",{"_index":111,"title":{},"body":{"classes/ColorCulture.html":{}}}],["models/rgb",{"_index":110,"title":{},"body":{"classes/ColorCulture.html":{}}}],["modifi",{"_index":241,"title":{},"body":{"license.html":{}}}],["modul",{"_index":97,"title":{"modules.html":{}},"body":{"classes/ColorCulture.html":{},"modules.html":{}}}],["n",{"_index":100,"title":{},"body":{"classes/ColorCulture.html":{}}}],["name",{"_index":44,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"index.html":{},"todo.html":{}}}],["need",{"_index":105,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["new",{"_index":76,"title":{},"body":{"classes/Color.html":{},"coverage.html":{},"index.html":{}}}],["ngraph.graph",{"_index":162,"title":{},"body":{"dependencies.html":{}}}],["ngraph.path",{"_index":164,"title":{},"body":{"dependencies.html":{}}}],["noninfring",{"_index":266,"title":{},"body":{"license.html":{}}}],["notic",{"_index":254,"title":{},"body":{"license.html":{}}}],["now",{"_index":209,"title":{},"body":{"index.html":{}}}],["npm",{"_index":185,"title":{},"body":{"index.html":{}}}],["number",{"_index":16,"title":{},"body":{"classes/Color.html":{}}}],["object",{"_index":42,"title":{},"body":{"classes/Color.html":{}}}],["object.getprototypeof(this).model",{"_index":74,"title":{},"body":{"classes/Color.html":{}}}],["obtain",{"_index":233,"title":{},"body":{"license.html":{}}}],["on",{"_index":174,"title":{},"body":{"index.html":{}}}],["option",{"_index":45,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["order",{"_index":217,"title":{},"body":{"index.html":{}}}],["otaviocsanto",{"_index":226,"title":{},"body":{"license.html":{}}}],["other",{"_index":199,"title":{},"body":{"index.html":{}}}],["otherwis",{"_index":278,"title":{},"body":{"license.html":{}}}],["out",{"_index":280,"title":{},"body":{"license.html":{}}}],["overview",{"_index":281,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":160,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["param",{"_index":79,"title":{},"body":{"classes/Color.html":{}}}],["paramet",{"_index":43,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["particular",{"_index":264,"title":{},"body":{"license.html":{}}}],["path",{"_index":86,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["permiss",{"_index":227,"title":{},"body":{"license.html":{}}}],["permit",{"_index":248,"title":{},"body":{"license.html":{}}}],["person",{"_index":232,"title":{},"body":{"license.html":{}}}],["portion",{"_index":257,"title":{},"body":{"license.html":{}}}],["privat",{"_index":10,"title":{},"body":{"classes/Color.html":{}}}],["properti",{"_index":9,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["provid",{"_index":103,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{},"license.html":{}}}],["publish",{"_index":243,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":265,"title":{},"body":{"license.html":{}}}],["react",{"_index":286,"title":{},"body":{"todo.html":{}}}],["read",{"_index":29,"title":{},"body":{"classes/Color.html":{}}}],["readonli",{"_index":12,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["regist",{"_index":90,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["register(from",{"_index":98,"title":{},"body":{"classes/ColorCulture.html":{}}}],["rememb",{"_index":214,"title":{},"body":{"index.html":{}}}],["request",{"_index":38,"title":{},"body":{"classes/Color.html":{}}}],["restrict",{"_index":238,"title":{},"body":{"license.html":{}}}],["result",{"_index":81,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"todo.html":{}}}],["return",{"_index":36,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["rgb",{"_index":41,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"coverage.html":{},"index.html":{}}}],["rgb(0",{"_index":179,"title":{},"body":{"index.html":{}}}],["rgb.b",{"_index":126,"title":{},"body":{"classes/ColorCulture.html":{}}}],["rgb.g",{"_index":124,"title":{},"body":{"classes/ColorCulture.html":{}}}],["rgb.model",{"_index":63,"title":{},"body":{"classes/Color.html":{},"index.html":{}}}],["rgb.r",{"_index":121,"title":{},"body":{"classes/ColorCulture.html":{}}}],["right",{"_index":240,"title":{},"body":{"license.html":{}}}],["run",{"_index":219,"title":{},"body":{"index.html":{}}}],["s",{"_index":134,"title":{},"body":{"classes/ColorCulture.html":{}}}],["save",{"_index":186,"title":{},"body":{"index.html":{}}}],["select",{"_index":176,"title":{},"body":{"index.html":{}}}],["sell",{"_index":247,"title":{},"body":{"license.html":{}}}],["set",{"_index":56,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["setalpha(v",{"_index":54,"title":{},"body":{"classes/Color.html":{}}}],["setvalue(v",{"_index":65,"title":{},"body":{"classes/Color.html":{}}}],["shall",{"_index":255,"title":{},"body":{"license.html":{}}}],["shortest",{"_index":85,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["signatur",{"_index":58,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["softwar",{"_index":235,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["src/color",{"_index":83,"title":{},"body":{"classes/ColorCulture.html":{},"coverage.html":{}}}],["src/convert.t",{"_index":149,"title":{},"body":{"coverage.html":{}}}],["src/models/color.t",{"_index":5,"title":{},"body":{"classes/Color.html":{},"coverage.html":{}}}],["src/models/color.ts:10",{"_index":28,"title":{},"body":{"classes/Color.html":{}}}],["src/models/color.ts:15",{"_index":23,"title":{},"body":{"classes/Color.html":{}}}],["src/models/color.ts:20",{"_index":53,"title":{},"body":{"classes/Color.html":{}}}],["src/models/color.ts:27",{"_index":55,"title":{},"body":{"classes/Color.html":{}}}],["src/models/color.ts:34",{"_index":60,"title":{},"body":{"classes/Color.html":{}}}],["src/models/color.ts:46",{"_index":66,"title":{},"body":{"classes/Color.html":{}}}],["src/models/color.ts:55",{"_index":34,"title":{},"body":{"classes/Color.html":{}}}],["src/models/color.ts:63",{"_index":49,"title":{},"body":{"classes/Color.html":{}}}],["src/models/css.t",{"_index":152,"title":{},"body":{"coverage.html":{}}}],["src/models/hsl.t",{"_index":155,"title":{},"body":{"coverage.html":{}}}],["src/models/rgb.t",{"_index":157,"title":{},"body":{"coverage.html":{}}}],["start",{"_index":167,"title":{"index.html":{},"license.html":{},"todo.html":{}},"body":{}}],["statement",{"_index":146,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":13,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["string",{"_index":27,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["subject",{"_index":250,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":245,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":256,"title":{},"body":{"license.html":{}}}],["t",{"_index":47,"title":{},"body":{"classes/Color.html":{}}}],["t3",{"_index":141,"title":{},"body":{"classes/ColorCulture.html":{}}}],["tabl",{"_index":159,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":158,"title":{},"body":{"coverage.html":{}}}],["termin",{"_index":220,"title":{},"body":{"index.html":{}}}],["test",{"_index":218,"title":{},"body":{"index.html":{}}}],["there'",{"_index":198,"title":{},"body":{"index.html":{}}}],["this._alpha",{"_index":72,"title":{},"body":{"classes/Color.html":{}}}],["to(val",{"_index":48,"title":{},"body":{"classes/Color.html":{}}}],["todo",{"_index":282,"title":{"todo.html":{}},"body":{}}],["tort",{"_index":277,"title":{},"body":{"license.html":{}}}],["two",{"_index":88,"title":{},"body":{"classes/ColorCulture.html":{}}}],["type",{"_index":17,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"coverage.html":{}}}],["updat",{"_index":67,"title":{},"body":{"classes/Color.html":{}}}],["us",{"_index":31,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"license.html":{}}}],["usag",{"_index":187,"title":{},"body":{"index.html":{},"todo.html":{}}}],["val",{"_index":46,"title":{},"body":{"classes/Color.html":{}}}],["val().signatur",{"_index":78,"title":{},"body":{"classes/Color.html":{}}}],["valu",{"_index":20,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"index.html":{}}}],["version",{"_index":89,"title":{},"body":{"classes/ColorCulture.html":{}}}],["void",{"_index":57,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["vue",{"_index":285,"title":{},"body":{"todo.html":{}}}],["warranti",{"_index":258,"title":{},"body":{"license.html":{}}}],["way",{"_index":173,"title":{},"body":{"index.html":{}}}],["whether",{"_index":274,"title":{},"body":{"license.html":{}}}],["wich",{"_index":106,"title":{},"body":{"classes/ColorCulture.html":{}}}],["without",{"_index":104,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{},"license.html":{}}}],["work",{"_index":196,"title":{},"body":{"index.html":{}}}],["xyz",{"_index":192,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Color.html":{"url":"classes/Color.html","title":"class - Color","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Color\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/models/color.ts\n        \n\n            \n                Description\n            \n            \n                Base Color class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _alpha\n                            \n                            \n                                    Readonly\n                                    Static\n                                model\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                as\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _alpha\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _alpha:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/models/color.ts:15\n                            \n                        \n\n                \n                    \n                        alpha channel internal property\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Static\n                            model\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        model:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/models/color.ts:10\n                            \n                        \n\n                \n                    \n                        Read only string constant used to identify this color model\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            as\n                            \n                            \n                        \n                    \n                \n                \n                    \nas(val: )\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/models/color.ts:55\n                            \n                        \n\n                \n                    \n                            Typed conversion, returns the converted color to the model requested, \neg: color.as() will return an RGB object\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        val\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     T\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            to\n                            \n                            \n                        \n                    \n                \n                \n                    \nto(val: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/models/color.ts:63\n                            \n                        \n\n                \n                    \n                            Convert this color to another color model\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        val\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Color\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        alpha\n                    \n                \n\n                \n                    \n                        getalpha()\n                    \n                \n                            \n                                \n                                    Defined in src/models/color.ts:20\n                                \n                            \n                    \n                        \n                                get alpha channel value\n\n\n                                \n                                    Returns :     number\n\n                                \n                        \n                    \n\n                \n                    \n                        setalpha(val: number)\n                    \n                \n                            \n                                \n                                    Defined in src/models/color.ts:27\n                                \n                            \n                    \n                        \n                                set alpha channel value\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                        val\n                                                    \n                                                            \n                                                                        number\n                                                            \n                                                    \n                                                        \n                                                                no\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        signature\n                    \n                \n\n                \n                    \n                        getsignature()\n                    \n                \n                            \n                                \n                                    Defined in src/models/color.ts:34\n                                \n                            \n                    \n                        \n                                Returns this color type model. For example a color instance of RGB class will return RGB.model, ie \"RGB\".\n\n\n                                \n                                    Returns :     string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n\n\n                \n                    \n                        setvalue(val: )\n                    \n                \n                            \n                                \n                                    Defined in src/models/color.ts:46\n                                \n                            \n                    \n                        \n                                Update alpha value using val parameter\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                        val\n                                                    \n                                                    \n                                                        \n                                                                no\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { ColorCulture } from '../color-culture';\nimport { Convert } from '../convert';\n/**\n * Base Color class\n */\nexport class Color {\n\t/**\n\t * Read only string constant used to identify this color model\n\t */\n\tstatic readonly model: string = \"\";\n\n\t/**\n\t * alpha channel internal property\n\t */\n\tprivate _alpha = 1;\n\n\t/**\n\t * get alpha channel value\n\t */\n\tget alpha(): number {\n\t\treturn this._alpha;\n\t}\n\n\t/**\n\t * set alpha channel value\n\t */\n\tset alpha(val: number) {\n\t\tthis._alpha = val;\n\t}\n\n\t/**\n\t * Returns this color type model. For example a color instance of RGB class will return RGB.model, ie \"RGB\".\n\t */\n\tget signature(): string {\n\t\t/*\n\t\tcould not use\n\t\tObject.getPrototypeOf(this).model ) will return an RGB object\n\t *  @value Type to which this color will be converted, eg: color_instance.as(HSL)\n\t */\n\tas(val: new () => T): T {\n\t\treturn Convert.it(this, new val().signature) as T;\n\t}\n\n\t/**\n\t * Convert this color to another color model\n\t * @param value Color model to which this color will be converted, eg: color_instance.as(HSL.model)\n\t */\n\tto(val: string): Color {\n\t\treturn Convert.it(this, val);\n\t}\n\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ColorCulture.html":{"url":"classes/ColorCulture.html","title":"class - ColorCulture","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ColorCulture\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/color-culture.ts\n        \n\n            \n                Description\n            \n            \n                Color Culture, the shortest path between two colors\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Static\n                                version\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/color-culture.ts:15\n                            \n                        \n\n                \n                    \n                            When Color Culture is instantiated it register basic conversion functions\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Static\n                            version\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        version:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '1.0.0'\n                        \n                    \n                        \n                            \n                                    Defined in src/color-culture.ts:15\n                            \n                        \n\n                \n                    \n                        this module version\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            register\n                            \n                            \n                        \n                    \n                \n                \n                    \nregister(from: string, to: string, func: (n: any) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/color-culture.ts:142\n                            \n                        \n\n                \n                    \n                            Convenience method, provide conversion without the need to import Converter\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        from\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                Color signature from wich the conversion will be made, eg: \"RGB\"\n\n                                                        \n                                                \n                                                \n                                                        to\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                Color signature to wich the conversion will be made, eg: \"HSL\"\n\n                                                        \n                                                \n                                                \n                                                        func\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                Function that does the color conversion\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Convert } from './convert';\nimport { Color } from './models/color';\nimport { RGB } from './models/rgb';\nimport { HSL } from './models/hsl';\nimport { CSS } from './models/css';\n\n/**\n * Color Culture, the shortest path between two colors\n */\nexport class ColorCulture {\n  /**\n   * this module version\n   */\n\n  static readonly version: string = '1.0.0';\n  /**\n    * When Color Culture is instantiated it register basic conversion functions\n    */\n  constructor() {\n    // include batteries, set conversion for commonly used color classes\n\n    // Convert from RGB to HSL\n    Convert.register(RGB.model, HSL.model,\n      function (rgb: any): HSL {\n        rgb = rgb as RGB;\n        const fr = rgb.r / 255;\n        const fg = rgb.g / 255;\n        const fb = rgb.b / 255;\n        const min = Math.min(fr, fg, fb);\n        const max = Math.max(fr, fg, fb);\n        const delta = max - min;\n        let h = 0;\n        let s;\n        let l;\n\n        if (max === min) {\n          h = 0;\n        } else if (fr === max) {\n          h = (fg - fb) / delta;\n        } else if (fg === max) {\n          h = 2 + (fb - fr) / delta;\n        } else if (fb === max) {\n          h = 4 + (fr - fg) / delta;\n        }\n\n        h = Math.min(h * 60, 360);\n\n        if (h  1) {\n              t3--;\n            }\n\n            if (6 * t3  any) {\n    Convert.register(from, to, func);\n  }\n\n\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Documentation coverage\n\n\n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                    src/color-culture.ts\n            \n            \n                class\n            \n            \n                ColorCulture\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                    src/convert.ts\n            \n            \n                class\n            \n            \n                Convert\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                    src/models/color.ts\n            \n            \n                class\n            \n            \n                Color\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                    src/models/css.ts\n            \n            \n                class\n            \n            \n                CSS\n            \n            \n                75 %\n                (9/12)\n            \n        \n        \n            \n                \n                    src/models/hsl.ts\n            \n            \n                class\n            \n            \n                HSL\n            \n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                    src/models/rgb.ts\n            \n            \n                class\n            \n            \n                RGB\n            \n            \n                100 %\n                (11/11)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            ngraph.graph : 0.0.14\n        \n            ngraph.path : ^1.0.2\n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nColor Culture\nColor naming and conversion library, with automatic path finding between color models.\nColor Culture makes color conversion easier by automatically finding a way to convert from one color model to another.\nTo create on color you just need to select the desired color model:\n\nimport { RGB } from 'rgb';\n\nlet colorA: RGB = new RGB(0, 0, 255); //blueTo convert to another color model just call the function connected to the desired color model:\n\nimport { HSL } from 'hsl';\n\nlet colorB:HSL = colorA.hsl();Installation\nnpm i color-culture --save\nUsage\nimport { ColorCulture } from 'color-culture';Instantiate the main class:\n\nconst cc = new ColorCulture();Conversion\nBasic color conversion is provided to RGB, HSL and XYZ.\n// import models\nimport { RGB } from 'rgb';\nimport { HSL } from 'hsl';\n\n// instantiate Color Culture\nconst cc = new ColorCulture();\n\nlet colorA: RGB = new RGB(0, 0, 255); //blue\nlet colorB: HSL = colorA.hsl();How to work with new color models\nIn case you have a new color model there's no need to create conversion functions to all others color models, Color Culture will automatically find the shortest path between models. \nConversion work as long as there's at least one function converting to RGB or HSL, and one function converting from RGB or HSL to your new model\n// import color culture\nimport { ColorCulture } from 'color-culture';\n// import color class to extend it\nimport { Color } from 'color';\n\n// import converter to register your converting functions\nimport { Converter } from 'converter';\n\n// import models\nimport { RGB } from 'rgb';\nimport { HSL } from 'hsl';\nimport { Hip } from 'hipothetical-colormodel'; // your hipothetical new color model\n\n\n// instantiate Color Culture\nconst cc = new ColorCulture();\n\n// register your converting functions\n// from RGB to your color model\nConverter.register(\"RGB\", \"HIP\", Converter.register(RGB.model, HIP.model,\n      function (value: any): HIP { ... })\n\n// from your color model to RGB\nConverter.register(HIP.model, RGB.model,\n      function (value: any): RGB { ... })\n\n//now you can convert from your color model to and from any other color model registered\n//without the need to create functions to every color model\nlet colorA: HIP = new HIP(...hipothetical values);\nlet colorB: HSL = colorA.hsl(); // color culture will convert colorA->RGB->HSL\nExamples\nExamples can be found in examples folder, remember to execute npm install in order to install all packages needed.\nTest\nTo run tests execute in a terminal:\nnpm run test\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018 otaviocsantos\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n    \n            \n                \n                    \n                        \n                        6 classes\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"todo.html":{"url":"todo.html","title":"getting-started - todo","body":"\n                   \n\nColor Culture\nTo do:\n\n[ ] Additional color models\n[ ] Angular usage example\n[ ] Vue usage example\n[ ] React usage example\n\nMilestones\n1.0.1\nColor manipulation methods\n1.0.2\nColor naming\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
