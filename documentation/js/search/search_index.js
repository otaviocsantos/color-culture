var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.1.6","fields":["title","body"],"fieldVectors":[["title/classes/Color.html",[0,0.311,1,0.465]],["body/classes/Color.html",[0,0.489,1,0.855,2,0.998,3,0.998,4,0.755,5,0.998,6,0.998,7,2.057,8,0.755,9,2.014,10,2.476,11,2.756,12,1.809,13,1.809,14,1.946,15,1.37,16,3.226,17,1.785,18,0.11,19,1.503,20,1.916,21,1.503,22,2.426,23,1.365,24,3.397,25,3.108,26,2.057,27,2.569,28,1.365,29,2.057,30,2.057,31,2.161,32,1.503,33,2.057,34,1.365,35,1.365,36,0.998,37,0.755,38,0.998,39,1.365,40,1.365,41,1.365,42,2.161,43,1.16,44,2.014,45,2.357,46,2.633,47,2.756,48,2.057,49,1.365,50,1.308,51,1.503,52,1.365,53,1.365,54,1.365,55,1.365,56,1.365,57,1.809,58,1.503,59,1.503,60,1.365,61,1.365,62,1.503,63,2.057,64,1.308,65,1.139,66,2.057,67,1.365,68,1.365,69,1.365,70,1.37,71,0.866,72,0.998,73,2.057,74,1.365,75,1.365,76,1.503,77,1.365,78,0.866,79,2.057,80,1.365,81,0.998,82,1.365,83,0.056,84,0.056]],["title/classes/ColorCulture.html",[0,0.311,85,0.863]],["body/classes/ColorCulture.html",[0,0.258,1,0.734,2,0.569,3,0.569,4,0.431,6,0.959,8,0.431,9,0.959,12,1.243,13,1.243,15,1.105,17,0.726,18,0.111,19,0.569,20,0.431,21,1.879,22,1.243,27,2.054,31,0.569,36,0.959,37,1.654,38,1.459,42,0.569,43,0.328,44,0.569,45,1.459,46,1.459,50,1.082,57,0.569,58,0.959,59,1.459,64,1.258,65,0.726,70,1.494,71,1.082,72,0.569,76,1.459,78,0.84,81,1.243,83,0.035,84,0.035,85,0.552,86,1.459,87,0.569,88,1.105,89,0.959,90,0.959,91,0.959,92,1.312,93,2.416,94,1.459,95,1.7,96,1.312,97,0.959,98,0.959,99,1.973,100,1.312,101,0.726,102,1.312,103,2.229,104,1.312,105,0.778,106,0.959,107,0.959,108,0.959,109,1.996,110,1.7,111,1.243,112,0.778,113,0.778,114,0.778,115,1.312,116,0.778,117,1.766,118,2.701,119,0.778,120,1.879,121,3.061,122,0.778,123,3.061,124,0.778,125,1.7,126,0.778,127,2.416,128,0.778,129,1.996,130,2.571,131,1.243,132,0.778,133,1.7,134,0.778,135,0.778,136,0.778,137,0.778,138,1.312,139,1.7,140,0.778,141,2.416,142,2.416,143,2.416,144,2.416,145,0.778,146,0.778,147,2.571,148,0.778,149,0.778,150,0.778,151,2.906,152,0.778,153,0.778,154,0.778,155,2.701,156,0.778,157,0.778,158,0.778,159,0.778,160,1.766,161,0.778,162,1.312,163,0.778,164,0.778,165,0.778,166,0.778,167,0.778,168,2.811,169,0.778,170,0.778,171,1.7,172,0.778,173,1.7,174,1.7,175,1.996,176,1.996,177,0.778,178,0.778,179,0.778,180,0.778,181,0.778,182,0.778,183,0.778,184,0.778,185,0.778,186,1.312,187,0.778,188,1.7,189,0.778,190,0.778,191,0.778,192,1.7,193,0.778,194,0.778,195,1.7,196,0.778,197,1.7,198,1.7,199,2.416,200,0.778,201,0.778,202,1.7,203,0.778,204,0.778]],["title/coverage.html",[205,2.009]],["body/coverage.html",[0,0.57,1,0.611,4,1.49,5,1.967,17,1.49,18,0.105,32,1.967,50,1.133,64,1.133,71,1.133,78,1.133,83,0.088,84,0.088,85,1.133,86,1.967,87,1.967,160,2.747,205,1.967,206,2.692,207,2.692,208,2.692,209,2.692,210,2.692,211,2.692,212,2.692,213,3.273,214,2.692,215,2.692,216,2.692]],["title/dependencies.html",[217,1.736,218,1.792]],["body/dependencies.html",[18,0.103,83,0.095,84,0.095,218,2.225,219,3.045,220,3.045,221,3.045,222,2.225]],["title/index.html",[8,0.961,223,0.961,224,0.961]],["body/index.html",[0,0.324,1,0.893,14,2.088,18,0.109,20,1.411,37,1.752,43,0.604,50,1.497,51,1.56,64,1.558,65,0.794,70,2.063,71,1.515,78,1.475,83,0.058,84,0.058,85,1.271,88,1.939,89,1.048,90,1.56,91,1.56,94,1.863,97,1.863,98,1.048,99,2.516,106,1.048,107,1.048,108,1.863,111,1.048,117,1.863,120,1.56,131,1.56,225,1.434,226,2.55,227,2.55,228,1.434,229,1.434,230,1.434,231,2.55,232,2.55,233,1.434,234,2.135,235,2.825,236,2.135,237,2.135,238,1.434,239,1.434,240,1.434,241,2.55,242,1.434,243,1.434,244,1.434,245,1.048,246,1.434,247,2.55,248,2.135,249,2.135,250,1.434,251,2.135,252,1.434,253,1.434,254,1.434,255,2.825,256,2.135,257,1.434,258,1.434,259,1.434,260,1.434,261,1.434,262,1.434,263,1.434]],["title/license.html",[223,0.961,224,0.961,264,1.736]],["body/license.html",[18,0.097,83,0.097,84,0.097,265,3.119]],["title/modules.html",[101,1.521]],["body/modules.html",[18,0.097,83,0.097,84,0.097,101,1.726]],["title/overview.html",[266,2.009]],["body/overview.html",[0,0.469,18,0.096,83,0.096,84,0.096,266,2.261,267,3.094]],["title/todo.html",[223,0.961,224,0.961,268,1.736]],["body/todo.html",[1,0.838,14,1.516,15,1.516,18,0.108,43,1.153,62,2.697,83,0.089,84,0.089,88,1.516,222,2.002,245,2.697,269,2.74,270,2.74,271,2.74,272,2.74,273,2.74,274,2.74,275,2.74,276,2.74]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"todo.html":{}}}],["0",{"_index":131,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["0.0.14",{"_index":220,"title":{},"body":{"dependencies.html":{}}}],["0.0031308",{"_index":195,"title":{},"body":{"classes/ColorCulture.html":{}}}],["0.008856",{"_index":171,"title":{},"body":{"classes/ColorCulture.html":{}}}],["0.0193",{"_index":156,"title":{},"body":{"classes/ColorCulture.html":{}}}],["0.04045",{"_index":139,"title":{},"body":{"classes/ColorCulture.html":{}}}],["0.055",{"_index":141,"title":{},"body":{"classes/ColorCulture.html":{}}}],["0.0722",{"_index":154,"title":{},"body":{"classes/ColorCulture.html":{}}}],["0.1192",{"_index":157,"title":{},"body":{"classes/ColorCulture.html":{}}}],["0.1805",{"_index":150,"title":{},"body":{"classes/ColorCulture.html":{}}}],["0.2126",{"_index":152,"title":{},"body":{"classes/ColorCulture.html":{}}}],["0.3576",{"_index":149,"title":{},"body":{"classes/ColorCulture.html":{}}}],["0.4124",{"_index":148,"title":{},"body":{"classes/ColorCulture.html":{}}}],["0.7152",{"_index":153,"title":{},"body":{"classes/ColorCulture.html":{}}}],["0.9505",{"_index":158,"title":{},"body":{"classes/ColorCulture.html":{}}}],["1",{"_index":21,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["1.0",{"_index":197,"title":{},"body":{"classes/ColorCulture.html":{}}}],["1.0.0",{"_index":100,"title":{},"body":{"classes/ColorCulture.html":{}}}],["1.0.1",{"_index":275,"title":{},"body":{"todo.html":{}}}],["1.0.2",{"_index":222,"title":{},"body":{"dependencies.html":{},"todo.html":{}}}],["1.055",{"_index":142,"title":{},"body":{"classes/ColorCulture.html":{}}}],["100",{"_index":160,"title":{},"body":{"classes/ColorCulture.html":{},"coverage.html":{}}}],["108.883",{"_index":170,"title":{},"body":{"classes/ColorCulture.html":{}}}],["11/11",{"_index":213,"title":{},"body":{"coverage.html":{}}}],["116",{"_index":176,"title":{},"body":{"classes/ColorCulture.html":{}}}],["12.92",{"_index":144,"title":{},"body":{"classes/ColorCulture.html":{}}}],["16",{"_index":175,"title":{},"body":{"classes/ColorCulture.html":{}}}],["2",{"_index":134,"title":{},"body":{"classes/ColorCulture.html":{}}}],["2.4",{"_index":143,"title":{},"body":{"classes/ColorCulture.html":{}}}],["200",{"_index":180,"title":{},"body":{"classes/ColorCulture.html":{}}}],["255",{"_index":120,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["3",{"_index":173,"title":{},"body":{"classes/ColorCulture.html":{}}}],["360",{"_index":138,"title":{},"body":{"classes/ColorCulture.html":{}}}],["4",{"_index":135,"title":{},"body":{"classes/ColorCulture.html":{}}}],["4/4",{"_index":208,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":267,"title":{},"body":{"overview.html":{}}}],["5/5",{"_index":209,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":179,"title":{},"body":{"classes/ColorCulture.html":{}}}],["6",{"_index":194,"title":{},"body":{"classes/ColorCulture.html":{}}}],["60",{"_index":137,"title":{},"body":{"classes/ColorCulture.html":{}}}],["7.787",{"_index":174,"title":{},"body":{"classes/ColorCulture.html":{}}}],["8/8",{"_index":211,"title":{},"body":{"coverage.html":{}}}],["95.047",{"_index":169,"title":{},"body":{"classes/ColorCulture.html":{}}}],["_alpha",{"_index":11,"title":{},"body":{"classes/Color.html":{}}}],["accessor",{"_index":52,"title":{},"body":{"classes/Color.html":{}}}],["addit",{"_index":269,"title":{},"body":{"todo.html":{}}}],["alpha",{"_index":24,"title":{},"body":{"classes/Color.html":{}}}],["alpha(v",{"_index":74,"title":{},"body":{"classes/Color.html":{}}}],["angular",{"_index":271,"title":{},"body":{"todo.html":{}}}],["anoth",{"_index":51,"title":{},"body":{"classes/Color.html":{},"index.html":{}}}],["as(val",{"_index":33,"title":{},"body":{"classes/Color.html":{}}}],["automat",{"_index":226,"title":{},"body":{"index.html":{}}}],["b",{"_index":168,"title":{},"body":{"classes/ColorCulture.html":{}}}],["base",{"_index":7,"title":{},"body":{"classes/Color.html":{}}}],["basic",{"_index":98,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["batteri",{"_index":113,"title":{},"body":{"classes/ColorCulture.html":{}}}],["between",{"_index":91,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["blue",{"_index":237,"title":{},"body":{"index.html":{}}}],["call",{"_index":238,"title":{},"body":{"index.html":{}}}],["case",{"_index":250,"title":{},"body":{"index.html":{}}}],["cc",{"_index":247,"title":{},"body":{"index.html":{}}}],["channel",{"_index":25,"title":{},"body":{"classes/Color.html":{}}}],["class",{"_index":0,"title":{"classes/Color.html":{},"classes/ColorCulture.html":{}},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["color",{"_index":1,"title":{"classes/Color.html":{}},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"coverage.html":{},"index.html":{},"todo.html":{}}}],["color.a",{"_index":41,"title":{},"body":{"classes/Color.html":{}}}],["color_instance.as(hsl",{"_index":77,"title":{},"body":{"classes/Color.html":{}}}],["color_instance.as(hsl.model",{"_index":82,"title":{},"body":{"classes/Color.html":{}}}],["colora",{"_index":235,"title":{},"body":{"index.html":{}}}],["colora.hsl",{"_index":241,"title":{},"body":{"index.html":{}}}],["colorb",{"_index":248,"title":{},"body":{"index.html":{}}}],["colorb:hsl",{"_index":240,"title":{},"body":{"index.html":{}}}],["colorcultur",{"_index":85,"title":{"classes/ColorCulture.html":{}},"body":{"classes/ColorCulture.html":{},"coverage.html":{},"index.html":{}}}],["colormodel",{"_index":257,"title":{},"body":{"index.html":{}}}],["commonli",{"_index":114,"title":{},"body":{"classes/ColorCulture.html":{}}}],["connect",{"_index":239,"title":{},"body":{"index.html":{}}}],["const",{"_index":117,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["constant",{"_index":30,"title":{},"body":{"classes/Color.html":{}}}],["constructor",{"_index":95,"title":{},"body":{"classes/ColorCulture.html":{}}}],["conveni",{"_index":36,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["convers",{"_index":37,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"index.html":{}}}],["convert",{"_index":50,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"coverage.html":{},"index.html":{}}}],["convert.contains(hsl.model",{"_index":182,"title":{},"body":{"classes/ColorCulture.html":{}}}],["convert.contains(rgb.model",{"_index":161,"title":{},"body":{"classes/ColorCulture.html":{}}}],["convert.execute(thi",{"_index":163,"title":{},"body":{"classes/ColorCulture.html":{}}}],["convert.it(thi",{"_index":79,"title":{},"body":{"classes/Color.html":{}}}],["convert.register(from",{"_index":204,"title":{},"body":{"classes/ColorCulture.html":{}}}],["convert.register(hsl.model",{"_index":183,"title":{},"body":{"classes/ColorCulture.html":{}}}],["convert.register(rgb.model",{"_index":115,"title":{},"body":{"classes/ColorCulture.html":{}}}],["converter.register(\"rgb",{"_index":258,"title":{},"body":{"index.html":{}}}],["converter.register(hip.model",{"_index":261,"title":{},"body":{"index.html":{}}}],["converter.register(rgb.model",{"_index":259,"title":{},"body":{"index.html":{}}}],["coverag",{"_index":205,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["creat",{"_index":232,"title":{},"body":{"index.html":{}}}],["cultur",{"_index":88,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{},"todo.html":{}}}],["culture.t",{"_index":87,"title":{},"body":{"classes/ColorCulture.html":{},"coverage.html":{}}}],["culture.ts:16",{"_index":96,"title":{},"body":{"classes/ColorCulture.html":{}}}],["culture.ts:226",{"_index":105,"title":{},"body":{"classes/ColorCulture.html":{}}}],["default",{"_index":19,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["defin",{"_index":22,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["delta",{"_index":129,"title":{},"body":{"classes/ColorCulture.html":{}}}],["depend",{"_index":218,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["desir",{"_index":234,"title":{},"body":{"index.html":{}}}],["document",{"_index":206,"title":{},"body":{"coverage.html":{}}}],["easier",{"_index":229,"title":{},"body":{"index.html":{}}}],["eg",{"_index":76,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["exampl",{"_index":62,"title":{},"body":{"classes/Color.html":{},"todo.html":{}}}],["export",{"_index":72,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["extend",{"_index":254,"title":{},"body":{"index.html":{}}}],["fb",{"_index":123,"title":{},"body":{"classes/ColorCulture.html":{}}}],["fg",{"_index":121,"title":{},"body":{"classes/ColorCulture.html":{}}}],["fh",{"_index":184,"title":{},"body":{"classes/ColorCulture.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"coverage.html":{}}}],["find",{"_index":227,"title":{},"body":{"index.html":{}}}],["fl",{"_index":188,"title":{},"body":{"classes/ColorCulture.html":{}}}],["fr",{"_index":118,"title":{},"body":{"classes/ColorCulture.html":{}}}],["fs",{"_index":186,"title":{},"body":{"classes/ColorCulture.html":{}}}],["func",{"_index":103,"title":{},"body":{"classes/ColorCulture.html":{}}}],["function",{"_index":99,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["g",{"_index":199,"title":{},"body":{"classes/ColorCulture.html":{}}}],["get",{"_index":223,"title":{"index.html":{},"license.html":{},"todo.html":{}},"body":{}}],["getalpha",{"_index":53,"title":{},"body":{"classes/Color.html":{}}}],["getsignatur",{"_index":60,"title":{},"body":{"classes/Color.html":{}}}],["h",{"_index":130,"title":{},"body":{"classes/ColorCulture.html":{}}}],["hip",{"_index":255,"title":{},"body":{"index.html":{}}}],["hip(...hipothet",{"_index":263,"title":{},"body":{"index.html":{}}}],["hip.model",{"_index":260,"title":{},"body":{"index.html":{}}}],["hipothet",{"_index":256,"title":{},"body":{"index.html":{}}}],["hsl",{"_index":71,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"coverage.html":{},"index.html":{}}}],["hsl.model",{"_index":116,"title":{},"body":{"classes/ColorCulture.html":{}}}],["identifi",{"_index":32,"title":{},"body":{"classes/Color.html":{},"coverage.html":{}}}],["ie",{"_index":66,"title":{},"body":{"classes/Color.html":{}}}],["import",{"_index":70,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"index.html":{}}}],["includ",{"_index":112,"title":{},"body":{"classes/ColorCulture.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["instal",{"_index":242,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":63,"title":{},"body":{"classes/Color.html":{}}}],["instanti",{"_index":97,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["instead",{"_index":40,"title":{},"body":{"classes/Color.html":{}}}],["intern",{"_index":26,"title":{},"body":{"classes/Color.html":{}}}],["javascript",{"_index":270,"title":{},"body":{"todo.html":{}}}],["l",{"_index":133,"title":{},"body":{"classes/ColorCulture.html":{}}}],["lab",{"_index":110,"title":{},"body":{"classes/ColorCulture.html":{}}}],["lab(l",{"_index":181,"title":{},"body":{"classes/ColorCulture.html":{}}}],["lab.model",{"_index":162,"title":{},"body":{"classes/ColorCulture.html":{}}}],["librari",{"_index":225,"title":{},"body":{"index.html":{}}}],["licens",{"_index":264,"title":{"license.html":{}},"body":{}}],["long",{"_index":253,"title":{},"body":{"index.html":{}}}],["made",{"_index":38,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["main",{"_index":246,"title":{},"body":{"index.html":{}}}],["make",{"_index":228,"title":{},"body":{"index.html":{}}}],["manipul",{"_index":276,"title":{},"body":{"todo.html":{}}}],["match",{"_index":84,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"todo.html":{}}}],["math.max(fr",{"_index":128,"title":{},"body":{"classes/ColorCulture.html":{}}}],["math.min(fr",{"_index":126,"title":{},"body":{"classes/ColorCulture.html":{}}}],["math.min(h",{"_index":136,"title":{},"body":{"classes/ColorCulture.html":{}}}],["math.min(math.max(0",{"_index":202,"title":{},"body":{"classes/ColorCulture.html":{}}}],["math.pow(((fb",{"_index":146,"title":{},"body":{"classes/ColorCulture.html":{}}}],["math.pow(((fg",{"_index":145,"title":{},"body":{"classes/ColorCulture.html":{}}}],["math.pow(((fr",{"_index":140,"title":{},"body":{"classes/ColorCulture.html":{}}}],["math.pow(b",{"_index":201,"title":{},"body":{"classes/ColorCulture.html":{}}}],["math.pow(g",{"_index":200,"title":{},"body":{"classes/ColorCulture.html":{}}}],["math.pow(i",{"_index":177,"title":{},"body":{"classes/ColorCulture.html":{}}}],["math.pow(r",{"_index":196,"title":{},"body":{"classes/ColorCulture.html":{}}}],["math.pow(x",{"_index":172,"title":{},"body":{"classes/ColorCulture.html":{}}}],["math.pow(z",{"_index":178,"title":{},"body":{"classes/ColorCulture.html":{}}}],["max",{"_index":127,"title":{},"body":{"classes/ColorCulture.html":{}}}],["method",{"_index":15,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"todo.html":{}}}],["mileston",{"_index":274,"title":{},"body":{"todo.html":{}}}],["min",{"_index":125,"title":{},"body":{"classes/ColorCulture.html":{}}}],["mit",{"_index":265,"title":{},"body":{"license.html":{}}}],["model",{"_index":14,"title":{},"body":{"classes/Color.html":{},"index.html":{},"todo.html":{}}}],["modul",{"_index":101,"title":{"modules.html":{}},"body":{"classes/ColorCulture.html":{},"modules.html":{}}}],["n",{"_index":104,"title":{},"body":{"classes/ColorCulture.html":{}}}],["name",{"_index":43,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"index.html":{},"todo.html":{}}}],["need",{"_index":108,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["new",{"_index":78,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"coverage.html":{},"index.html":{}}}],["ngraph.graph",{"_index":219,"title":{},"body":{"dependencies.html":{}}}],["ngraph.path",{"_index":221,"title":{},"body":{"dependencies.html":{}}}],["now",{"_index":262,"title":{},"body":{"index.html":{}}}],["npm",{"_index":243,"title":{},"body":{"index.html":{}}}],["number",{"_index":16,"title":{},"body":{"classes/Color.html":{}}}],["object.getprototypeof(this).model",{"_index":75,"title":{},"body":{"classes/Color.html":{}}}],["on",{"_index":231,"title":{},"body":{"index.html":{}}}],["option",{"_index":44,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["other",{"_index":252,"title":{},"body":{"index.html":{}}}],["overview",{"_index":266,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":217,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":81,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["paramet",{"_index":42,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["path",{"_index":90,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["privat",{"_index":10,"title":{},"body":{"classes/Color.html":{}}}],["properti",{"_index":9,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["provid",{"_index":106,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["r",{"_index":198,"title":{},"body":{"classes/ColorCulture.html":{}}}],["react",{"_index":273,"title":{},"body":{"todo.html":{}}}],["read",{"_index":29,"title":{},"body":{"classes/Color.html":{}}}],["readonli",{"_index":12,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["refer",{"_index":39,"title":{},"body":{"classes/Color.html":{}}}],["regist",{"_index":94,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["register(from",{"_index":102,"title":{},"body":{"classes/ColorCulture.html":{}}}],["result",{"_index":83,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"todo.html":{}}}],["return",{"_index":46,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["rgb",{"_index":64,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"coverage.html":{},"index.html":{}}}],["rgb(0",{"_index":236,"title":{},"body":{"index.html":{}}}],["rgb(r",{"_index":203,"title":{},"body":{"classes/ColorCulture.html":{}}}],["rgb(val",{"_index":193,"title":{},"body":{"classes/ColorCulture.html":{}}}],["rgb.b",{"_index":124,"title":{},"body":{"classes/ColorCulture.html":{}}}],["rgb.g",{"_index":122,"title":{},"body":{"classes/ColorCulture.html":{}}}],["rgb.model",{"_index":65,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"index.html":{}}}],["rgb.r",{"_index":119,"title":{},"body":{"classes/ColorCulture.html":{}}}],["s",{"_index":132,"title":{},"body":{"classes/ColorCulture.html":{}}}],["save",{"_index":244,"title":{},"body":{"index.html":{}}}],["select",{"_index":233,"title":{},"body":{"index.html":{}}}],["set",{"_index":57,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["setalpha(v",{"_index":55,"title":{},"body":{"classes/Color.html":{}}}],["setvalue(v",{"_index":67,"title":{},"body":{"classes/Color.html":{}}}],["shortest",{"_index":89,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["signatur",{"_index":59,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["src/color",{"_index":86,"title":{},"body":{"classes/ColorCulture.html":{},"coverage.html":{}}}],["src/color.t",{"_index":5,"title":{},"body":{"classes/Color.html":{},"coverage.html":{}}}],["src/color.ts:11",{"_index":28,"title":{},"body":{"classes/Color.html":{}}}],["src/color.ts:16",{"_index":23,"title":{},"body":{"classes/Color.html":{}}}],["src/color.ts:21",{"_index":54,"title":{},"body":{"classes/Color.html":{}}}],["src/color.ts:28",{"_index":56,"title":{},"body":{"classes/Color.html":{}}}],["src/color.ts:35",{"_index":61,"title":{},"body":{"classes/Color.html":{}}}],["src/color.ts:47",{"_index":68,"title":{},"body":{"classes/Color.html":{}}}],["src/color.ts:55",{"_index":34,"title":{},"body":{"classes/Color.html":{}}}],["src/color.ts:63",{"_index":49,"title":{},"body":{"classes/Color.html":{}}}],["src/convert.t",{"_index":210,"title":{},"body":{"coverage.html":{}}}],["src/hsl.t",{"_index":212,"title":{},"body":{"coverage.html":{}}}],["src/rgb.t",{"_index":214,"title":{},"body":{"coverage.html":{}}}],["start",{"_index":224,"title":{"index.html":{},"license.html":{},"todo.html":{}},"body":{}}],["statement",{"_index":207,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":13,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["string",{"_index":27,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["t",{"_index":47,"title":{},"body":{"classes/Color.html":{}}}],["t1",{"_index":190,"title":{},"body":{"classes/ColorCulture.html":{}}}],["t2",{"_index":191,"title":{},"body":{"classes/ColorCulture.html":{}}}],["t3",{"_index":192,"title":{},"body":{"classes/ColorCulture.html":{}}}],["tabl",{"_index":216,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":215,"title":{},"body":{"coverage.html":{}}}],["there'",{"_index":251,"title":{},"body":{"index.html":{}}}],["this._",{"_index":187,"title":{},"body":{"classes/ColorCulture.html":{}}}],["this._alpha",{"_index":73,"title":{},"body":{"classes/Color.html":{}}}],["this._h",{"_index":185,"title":{},"body":{"classes/ColorCulture.html":{}}}],["this._l",{"_index":189,"title":{},"body":{"classes/ColorCulture.html":{}}}],["to(val",{"_index":48,"title":{},"body":{"classes/Color.html":{}}}],["todo",{"_index":268,"title":{"todo.html":{}},"body":{}}],["two",{"_index":92,"title":{},"body":{"classes/ColorCulture.html":{}}}],["type",{"_index":17,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"coverage.html":{}}}],["typescript",{"_index":35,"title":{},"body":{"classes/Color.html":{}}}],["updat",{"_index":69,"title":{},"body":{"classes/Color.html":{}}}],["us",{"_index":31,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["usag",{"_index":245,"title":{},"body":{"index.html":{},"todo.html":{}}}],["val",{"_index":45,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["val().signatur",{"_index":80,"title":{},"body":{"classes/Color.html":{}}}],["valu",{"_index":20,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{},"index.html":{}}}],["version",{"_index":93,"title":{},"body":{"classes/ColorCulture.html":{}}}],["void",{"_index":58,"title":{},"body":{"classes/Color.html":{},"classes/ColorCulture.html":{}}}],["vue",{"_index":272,"title":{},"body":{"todo.html":{}}}],["way",{"_index":230,"title":{},"body":{"index.html":{}}}],["wich",{"_index":109,"title":{},"body":{"classes/ColorCulture.html":{}}}],["without",{"_index":107,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["work",{"_index":249,"title":{},"body":{"index.html":{}}}],["x",{"_index":147,"title":{},"body":{"classes/ColorCulture.html":{}}}],["xyz",{"_index":111,"title":{},"body":{"classes/ColorCulture.html":{},"index.html":{}}}],["xyz(x",{"_index":159,"title":{},"body":{"classes/ColorCulture.html":{}}}],["xyz.i",{"_index":166,"title":{},"body":{"classes/ColorCulture.html":{}}}],["xyz.model",{"_index":164,"title":{},"body":{"classes/ColorCulture.html":{}}}],["xyz.x",{"_index":165,"title":{},"body":{"classes/ColorCulture.html":{}}}],["xyz.z",{"_index":167,"title":{},"body":{"classes/ColorCulture.html":{}}}],["y",{"_index":151,"title":{},"body":{"classes/ColorCulture.html":{}}}],["z",{"_index":155,"title":{},"body":{"classes/ColorCulture.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Color.html":{"url":"classes/Color.html","title":"class - Color","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Color\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/color.ts\n        \n\n            \n                Description\n            \n            \n                Base Color class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _alpha\n                            \n                            \n                                    Readonly\n                                    Static\n                                model\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                as\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _alpha\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _alpha:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/color.ts:16\n                            \n                        \n\n                \n                    \n                        alpha channel internal property\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Static\n                            model\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        model:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/color.ts:11\n                            \n                        \n\n                \n                    \n                        Read only string constant used to identify this color model\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            as\n                            \n                            \n                        \n                    \n                \n                \n                    \nas(val: )\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/color.ts:55\n                            \n                        \n\n                \n                    \n                            Typescript convenience method, so conversion can be made using a class reference instead of a string: Color.as()\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        val\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     T\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            to\n                            \n                            \n                        \n                    \n                \n                \n                    \nto(val: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/color.ts:63\n                            \n                        \n\n                \n                    \n                            Convert this color to another color model\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        val\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Color\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        alpha\n                    \n                \n\n                \n                    \n                        getalpha()\n                    \n                \n                            \n                                \n                                    Defined in src/color.ts:21\n                                \n                            \n                    \n                        \n                                get alpha channel value\n\n\n                                \n                                    Returns :     number\n\n                                \n                        \n                    \n\n                \n                    \n                        setalpha(val: number)\n                    \n                \n                            \n                                \n                                    Defined in src/color.ts:28\n                                \n                            \n                    \n                        \n                                set alpha channel value\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                        val\n                                                    \n                                                            \n                                                                        number\n                                                            \n                                                    \n                                                        \n                                                                no\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        signature\n                    \n                \n\n                \n                    \n                        getsignature()\n                    \n                \n                            \n                                \n                                    Defined in src/color.ts:35\n                                \n                            \n                    \n                        \n                                Returns this color type model. For example a color instance of RGB class will return RGB.model, ie \"RGB\".\n\n\n                                \n                                    Returns :     string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n\n\n                \n                    \n                        setvalue(val: )\n                    \n                \n                            \n                                \n                                    Defined in src/color.ts:47\n                                \n                            \n                    \n                        \n                                Update alpha value using val parameter\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                        val\n                                                    \n                                                    \n                                                        \n                                                                no\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { Convert } from './convert';\nimport { HSL } from './hsl';\nimport { RGB } from './rgb';\n/**\n * Base Color class\n */\nexport class Color {\n\t/**\n\t * Read only string constant used to identify this color model\n\t */\n\tstatic readonly model: string = \"\";\n\n\t/**\n\t * alpha channel internal property\n\t */\n\tprivate _alpha = 1;\n\n\t/**\n\t * get alpha channel value\n\t */\n\tget alpha(): number {\n\t\treturn this._alpha;\n\t}\n\n\t/**\n\t * set alpha channel value\n\t */\n\tset alpha(val: number) {\n\t\tthis._alpha = val;\n\t}\n\n\t/**\n\t * Returns this color type model. For example a color instance of RGB class will return RGB.model, ie \"RGB\".\n\t */\n\tget signature(): string {\n\t\t/*\n\t\tcould not use\n\t\tObject.getPrototypeOf(this).model )\n\t *  @value Type to which this color will be converted, eg: color_instance.as(HSL)\n\t */\n\tas(val: new () => T): T {\n\t\treturn Convert.it(this, new val().signature) as T;\n\t}\n\n\t/**\n\t * Convert this color to another color model\n\t * @param value Color model to which this color will be converted, eg: color_instance.as(HSL.model)\n\t */\n\tto(val: string): Color {\n\t\treturn Convert.it(this, val);\n\t}\n\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ColorCulture.html":{"url":"classes/ColorCulture.html","title":"class - ColorCulture","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ColorCulture\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/color-culture.ts\n        \n\n            \n                Description\n            \n            \n                Color Culture, the shortest path between two colors\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Static\n                                version\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/color-culture.ts:16\n                            \n                        \n\n                \n                    \n                            When Color Culture is instantiated it register basic conversion functions\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Static\n                            version\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        version:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '1.0.0'\n                        \n                    \n                        \n                            \n                                    Defined in src/color-culture.ts:16\n                            \n                        \n\n                \n                    \n                        this module version\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            register\n                            \n                            \n                        \n                    \n                \n                \n                    \nregister(from: string, to: string, func: (n: any) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/color-culture.ts:226\n                            \n                        \n\n                \n                    \n                            Convenience method, provide conversion without the need to import Converter\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        from\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                Color signature from wich the conversion will be made, eg: \"RGB\"\n\n                                                        \n                                                \n                                                \n                                                        to\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                Color signature to wich the conversion will be made, eg: \"HSL\"\n\n                                                        \n                                                \n                                                \n                                                        func\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                Function that does the color conversion\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Convert } from './convert';\nimport { Color } from './color';\nimport { RGB } from './rgb';\nimport { HSL } from './hsl';\n// import { LAB } from './lab';\n// import { XYZ } from './xyz';\n\n/**\n * Color Culture, the shortest path between two colors\n */\nexport class ColorCulture {\n  /**\n   * this module version\n   */\n\n  static readonly version: string = '1.0.0';\n  /**\n    * When Color Culture is instantiated it register basic conversion functions\n    */\n  constructor() {\n    // include batteries, set conversion for commonly used color classes\n\n    // Convert from RGB to HSL\n    Convert.register(RGB.model, HSL.model,\n      function (rgb: any): HSL {\n        rgb = rgb as RGB;\n        const fr = rgb.r / 255;\n        const fg = rgb.g / 255;\n        const fb = rgb.b / 255;\n        const min = Math.min(fr, fg, fb);\n        const max = Math.max(fr, fg, fb);\n        const delta = max - min;\n        let h = 0;\n        let s;\n        let l;\n\n        if (max === min) {\n          h = 0;\n        } else if (fr === max) {\n          h = (fg - fb) / delta;\n        } else if (fg === max) {\n          h = 2 + (fb - fr) / delta;\n        } else if (fb === max) {\n          h = 4 + (fr - fg) / delta;\n        }\n\n        h = Math.min(h * 60, 360);\n\n        if (h  0.04045 ? Math.pow(((fr + 0.055) / 1.055), 2.4) : (fr / 12.92);\n    // \t\t\tfg = fg > 0.04045 ? Math.pow(((fg + 0.055) / 1.055), 2.4) : (fg / 12.92);\n    // \t\t\tfb = fb > 0.04045 ? Math.pow(((fb + 0.055) / 1.055), 2.4) : (fb / 12.92);\n\n    // \t\t\tlet x = (fr * 0.4124) + (fg * 0.3576) + (fb * 0.1805);\n    // \t\t\tlet y = (fr * 0.2126) + (fg * 0.7152) + (fb * 0.0722);\n    // \t\t\tlet z = (fr * 0.0193) + (fg * 0.1192) + (fb * 0.9505);\n\n    // \t\t\treturn new XYZ(x * 100, y * 100, z * 100);\n    // \t\t}\n    // \t);\n    // }\n\n    // // Convert from RGB to LAB\n    // if (!Convert.contains(RGB.model, LAB.model)) {\n    // \tConvert.register(RGB.model, LAB.model,\n    // \t\tfunction () {\n    // \t\t\tlet xyz = Convert.execute(this, XYZ.model);\n    // \t\t\tlet x = xyz.x;\n    // \t\t\tlet y = xyz.y;\n    // \t\t\tlet z = xyz.z;\n    // \t\t\tlet l;\n    // \t\t\tlet a;\n    // \t\t\tlet b;\n\n    // \t\t\tx /= 95.047;\n    // \t\t\ty /= 100;\n    // \t\t\tz /= 108.883;\n\n    // \t\t\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n    // \t\t\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n    // \t\t\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n    // \t\t\tl = (116 * y) - 16;\n    // \t\t\ta = 500 * (x - y);\n    // \t\t\tb = 200 * (y - z);\n\n    // \t\t\treturn new LAB(l, a, b);\n    // \t\t}\n    // \t);\n    // }\n\n    // // Convert from HSL to RGB\n    // if (!Convert.contains(HSL.model, RGB.model)) {\n    // \tConvert.register(HSL.model, RGB.model,\n    // \t\tfunction () {\n\n    // \t\t\tlet fh = this._h / 360;\n    // \t\t\tlet fs = this._s / 100;\n    // \t\t\tlet fl = this._l / 100;\n    // \t\t\tlet t1;\n    // \t\t\tlet t2;\n    // \t\t\tlet t3;\n\n    // \t\t\tlet val;\n\n    // \t\t\tif (fs === 0) {\n    // \t\t\t\tval = fl * 255;\n    // \t\t\t\tnew RGB(val, val, val);\n    // \t\t\t}\n\n    // \t\t\tif (fl  1) {\n    // \t\t\t\t\tt3--;\n    // \t\t\t\t}\n\n    // \t\t\t\tif (6 * t3  0.0031308\n    // \t\t\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n    // \t\t\t\t: r * 12.92;\n\n    // \t\t\tg = g > 0.0031308\n    // \t\t\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n    // \t\t\t\t: g * 12.92;\n\n    // \t\t\tb = b > 0.0031308\n    // \t\t\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n    // \t\t\t\t: b * 12.92;\n\n    // \t\t\tr = Math.min(Math.max(0, r), 1);\n    // \t\t\tg = Math.min(Math.max(0, g), 1);\n    // \t\t\tb = Math.min(Math.max(0, b), 1);\n\n    // \t\t\treturn new RGB(r * 255, g * 255, b * 255);\n    // \t\t}\n    // \t);\n    // }\n\n\n\n\n\n  }\n\n  /**\n   * Convenience method, provide conversion without the need to import Converter\n   * @param from Color signature from wich the conversion will be made, eg: \"RGB\"\n\t * @param to Color signature to wich the conversion will be made, eg: \"HSL\"\n\t * @param func Function that does the color conversion\n   */\n  register(from: string, to: string, func: (n: any) => any) {\n    Convert.register(from, to, func);\n  }\n\n\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Documentation coverage\n\n\n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                    src/color-culture.ts\n            \n            \n                class\n            \n            \n                ColorCulture\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                    src/color.ts\n            \n            \n                class\n            \n            \n                Color\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                    src/convert.ts\n            \n            \n                class\n            \n            \n                Convert\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                    src/hsl.ts\n            \n            \n                class\n            \n            \n                HSL\n            \n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                    src/rgb.ts\n            \n            \n                class\n            \n            \n                RGB\n            \n            \n                100 %\n                (11/11)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            ngraph.graph : 0.0.14\n        \n            ngraph.path : ^1.0.2\n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nColor Culture\nColor naming and conversion library, with automatic path finding between color models.\nColor Culture makes color conversion easier by automatically finding a way to convert from one color model to another.\nTo create on color you just need to select the desired color model:\n\nimport { RGB } from 'rgb';\nlet colorA: RGB = new RGB(0, 0, 255); //blue\n\nTo convert to another color model just call the function connected to the desired color model:\n\nimport { HSL } from 'hsl';\nlet colorB:HSL = colorA.hsl();\n\nInstallation\nnpm i color-culture --save\nUsage\n\nimport { ColorCulture } from 'color-culture';\n\nInstantiate the main class:\n\nconst cc = new ColorCulture();\n\nConversion\nBasic color conversion is provided to RGB, HSL and XYZ.\n// import models\nimport { RGB } from 'rgb';\nimport { HSL } from 'hsl';\n\n// instantiate Color Culture\nconst cc = new ColorCulture();\n\nlet colorA: RGB = new RGB(0, 0, 255); //blue\nlet colorB: HSL = colorA.hsl();\n\n\nHow to work with new color models\nIn case you have a new color model there's no need to create conversion functions to all others color models, Color Culture will automatically find the shortest path between models. \nConversion work as long as there's at least one function converting to RGB or HSL, and one function converting from RGB or HSL to your new model\n// import color culture\nimport { ColorCulture } from 'color-culture';\n// import color class to extend it\nimport { Color } from 'color';\n\n// import converter to register your converting functions\nimport { Converter } from 'converter';\n\n// import models\nimport { RGB } from 'rgb';\nimport { HSL } from 'hsl';\nimport { Hip } from 'hipothetical-colormodel'; // your hipothetical new color model\n\n\n// instantiate Color Culture\nconst cc = new ColorCulture();\n\n// register your converting functions\n// from RGB to your color model\nConverter.register(\"RGB\", \"HIP\", Converter.register(RGB.model, HIP.model,\n      function (value: any): HIP { ... })\n\n// from your color model to RGB\nConverter.register(HIP.model, RGB.model,\n      function (value: any): RGB { ... })\n\n//now you can convert from your color model to and from any other color model registered\n//without the need to create functions to every color model\nlet colorA: HIP = new HIP(...hipothetical values);\nlet colorB: HSL = colorA.hsl(); // color culture will convert colorA->RGB->HSL\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n    \n            \n                \n                    \n                        \n                        5 classes\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"todo.html":{"url":"todo.html","title":"getting-started - todo","body":"\n                   \n\nColor Culture\nTo do:\n\n[ ] Additional color models\n[ ] Javascript usage  example\n[ ] Angular usage example\n[ ] Vue usage example\n[ ] React usage example\n\nMilestones\n1.0.1\nColor manipulation methods\n1.0.2\nColor naming\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
